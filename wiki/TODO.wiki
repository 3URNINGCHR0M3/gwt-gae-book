= Introduction =
GWT client-server communication is handled using [http://code.google.com/webtoolkit/doc/latest/DevGuideServerCommunication.html#DevGuideGettingUsedToAsyncCalls Asynchronous Calls]. On larger applications, this can quickly get messy. GWTP introduces a Dispatch framework, which complements GWT !AsyncCallback. It centralizes all client-server communication, making possible to implement features such as caching, batching, centralized failure handling, undo/redo. For more details, see [http://code.google.com/events/io/2009/sessions/GoogleWebToolkitBestPractices.html Best Practices For Architecting Your GWT App] and [http://en.wikipedia.org/wiki/Command_pattern Command pattern]

= How it works =
A server call is initiated with 
{{{
dispatch.exec(action, callback);
}}}







Pre-
Eclipse default project

[http://google-web-toolkit.googlecode.com/svn/javadoc/2.1/com/google/gwt/user/client/rpc/AsyncCallback.html AsyncCallback]

http://code.google.com/events/io/2009/sessions/GoogleWebToolkitBestPractices.html

http://code.google.com/p/gwt-platform/wiki/GettingStartedDispatch

Resources
http://code.google.com/p/gwt-platform/wiki/BoilerplateGeneration

auth

members mgmt

list shows jsonp

widget


Analytics

selenium

unit tests / mockito

mobile ui

[http://www.google.com/notebook/public/17393756076936429562/BDUsxIgoQmJbCk7ch Getting the Most from Eclipse]

= Advanced topics = 
[http://groups.google.com/group/gwt-platform/browse_thread/thread/ba03018b92c53c69/a786c1494ac7fafe#a786c1494ac7fafe Using Maven]
http://code.google.com/p/google-web-toolkit/wiki/CodeSplitting

[http://code.google.com/p/browsersec/ Browser Security Handbook]