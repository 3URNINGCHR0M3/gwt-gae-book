<wiki:toc max_depth="2" />

Time to add some functionality! There is some reading you have to do in advance for each section, but it's worth it.


= Data model =
*Pre-requisites*
 * [http://code.google.com/p/twig-persist/wiki/Quickstart Quickstart with twig-persist], an Object Datastore for Google App Engine
 * [http://code.google.com/p/twig-persist/wiki/Configuration Creating a Data Model]
 * [http://code.google.com/p/twig-persist/source/browse/src/test/java/com/google/code/twig/festival/MusicFestivalTestCase.java twig unit tests] to see more usage examples

<img src="http://gwt-gae-book.googlecode.com/svn/wiki/images/bale_of_hay.jpg" border="0"  align="right" />

Remember [DataModeling our data modeling] ? Let's code it!

*Theater.java*
{{{
package org.gwtgaebook.CultureShows.shared.model;

import java.util.*;

public class Theater {
	public String name;
	public String URL;
	public String language;

	public List<Member> members = new ArrayList<Member>();

	public List<Show> shows = new ArrayList<Show>();

	public List<Location> locations = new ArrayList<Location>();

	public List<Performance> performances = new ArrayList<Performance>();
}
}}}

*Show.java* 
{{{
package org.gwtgaebook.CultureShows.shared.model;

public class Show {
	public String name;
	public String URL;
	public int minuteDuration;
}
}}}

Here are [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/shared/model/ complete data models].

= Storing data =
In our server handler, we'll do
{{{
import com.google.appengine.api.datastore.Key;
import com.google.code.twig.*;
import com.google.code.twig.annotation.*;
...
		Show show = new Show();
		show.name = action.getShowName();

		ObjectDatastore ds = new AnnotationObjectDatastore();
		Key showKey = datastore.store(show);
}}}

After scheduling a show, go to [http://127.0.0.1:8888/_ah/admin your local datastore viewer] and check that it has been saved. Besides data model fields (name, URL), you'll see two more fields, [http://code.google.com/appengine/docs/python/datastore/keysandentitygroups.html Key and ID/Name].

= Linking shows to a theater =
Shows belong to theaters. In a regular app, we would have asked Violeta to perform the following steps:
 * sign up
 * create a theater and specify theater details such as name, website URL
 * define shows and locations assigned to the theater defined above
 * and at last, schedule a show performance

We can do better! We're simply asking Violeta to schedule a show. If she decides to sign in, we'll preserve the data for her. We'll take care of the details behind the scenes (pun intended :-), even though that's more work for us, the engineers.


= Exercise =

Think for 5 minutes how we can make this work.


= Exercise solution =

Here are two possible solutions:
 # store all data on the client until Violeta signs in. One way to store it would be directly in GWT, but we'd lose it all on a page refresh. Another way to store it would be using [http://php-html.net/tutorials/html5-local-storage-guide/ HTML5 web storage] or even cookies since the data amount is small.
 # store data on server by creating entities as soon as they are needed and use a cookie to link them to current anonymous user session. On sign in, assign these entities to the authenticated user.

We'll go with the server solution, as we need to write that code anyway. It will also work on older browsers. We need to be careful to have a script ran periodically which cleans up saved data not assigned to users.

Let us write down some [http://en.wikipedia.org/wiki/Pseudocode pseudocode] of how `ScheduleShowHandler` would work when we'll have full functionality:


{{{
//data received from client: userToken, theaterKey, showName, locationName and date
//userToken - random token set by client for users not signed it

anonymous = (AppEngineUser is not signed in)

if (anonymous) {
	userId = "anonymous-" + userToken
	//prefix prevents client setting valid user IDs and overwriting their data
	//issue: client can overwrite any anonymous user data by setting a matching RandomToken. That's ok. 
} else {
	userId = AppEngineUser.getId()
}

if (theaterKey is not empty) {
	load theater //might not exist, key may be invalid
	if (theater loaded) {
		verify userId has access to theater, exception if not
	} else {
		theaterKey = null	
	}
}

if (theaterKey is empty) {
	create theater instance with name "anonymous-YYYY-MM-DD-{random}"
	theaterKey = store(theater)
	create member(userId)
	assign member to theater with role administrator
}

showKey = find(showName assigned to theaterKey)
if (showKey is empty) {
	create and store show 
}

//same with location

create perfomance entry (showKey, locationKey, date) assigned to theaterKey

return theaterKey, showKey, locationKey
}}}


TODO

Adding shows works now, but a new theater is created for every show. We need the client to remember the current theater and send it with each request. The theater will either be sent from server when it's created, or chosen by Violeta to work on, if she will have multiple theaters.

There are a few possibilities to store data in GWT client as a session:
 * [http://stackoverflow.com/questions/1382088/session-id-cookie-in-gwt-rpc use server sessions], and persist sessions among requests. [http://groups.google.com/group/google-web-toolkit/browse_thread/thread/268ec2887bec95d2/ full sample]
 * use a static variable. It will be lost when users refresh page.
 * use HTML5 web storage
 * use cookies

For remembering the current theater, we'll go with simplest solution: a cookie.

TODO


= Exercise =
Enhance performances to store not only shows, but also locations and date. 


= Exercise solution =
...



= Resources =
 * [http://code.google.com/appengine/docs/java/datastore/ App Engine Datastore Java API]
 * [http://borglin.net/gwt-project/?page_id=604  A comparison of persistence frameworks]  for App Engine, [http://code.google.com/p/twig-persist/wiki/Comparison another comparison]


<img src="http://gwt-gae-book.googlecode.com/svn/wiki/assets/envelope.png" border="0"  /><a href="http://code.google.com/p/gwt-gae-book/issues/entry">Send feedback</a>