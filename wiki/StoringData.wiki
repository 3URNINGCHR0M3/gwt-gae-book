<wiki:toc max_depth="2" />

Time to add some functionality! There is some reading you have to do in advance for each section, but it's worth it.

= Client-server communication =

*Pre-requisites*
 * [http://code.google.com/appengine/docs/whatisgoogleappengine.html Google App Engine introduction]
 * [http://code.google.com/webtoolkit/doc/latest/DevGuideServerCommunication.html Client-server communication]
 * [http://code.google.com/p/gwt-platform/wiki/GettingStartedDispatch Client-server communication with gwt-platform]

== Exercise ==
Using what you learned above, start implementing saving schedule. Pass the data from client to server and write an `ActionHandler` which just logs a message with the show name.

== Exercise solution ==

`shared/dispatch/ScheduleShowAction.java`
{{{
package org.gwtgaebook.CultureShows.shared.dispatch;

import com.gwtplatform.dispatch.shared.*;

public class ScheduleShowAction extends UnsecuredActionImpl<ScheduleShowResult> {

	private static final long serialVersionUID = 4621412923270714515L;

	private String showName;

	public ScheduleShowAction(final String showName) {
		this.showName = showName;
	}

	/**
	 * For serialization only.
	 */
	@SuppressWarnings("unused")
	private ScheduleShowAction() {
	}

	public String getShowName() {
		return showName;
	}

}
}}}

`shared/dispatch/ScheduleShowResult.java`
{{{
package org.gwtgaebook.CultureShows.shared.dispatch;

import com.gwtplatform.dispatch.shared.*;

public class ScheduleShowResult implements Result {

	private static final long serialVersionUID = 4621412923270714515L;

	private String response;

	public ScheduleShowResult(final String response) {
		this.response = response;
	}

	/**
	 * For serialization only.
	 */
	@SuppressWarnings("unused")
	private ScheduleShowResult() {
	}

	public String getResponse() {
		return response;
	}

}
}}}

`server/dispatch/ScheduleShowHandler.java` 
{{{
package org.gwtgaebook.CultureShows.server.dispatch;

import com.google.inject.*;

import com.gwtplatform.dispatch.server.*;
import com.gwtplatform.dispatch.server.actionhandler.*;
import com.gwtplatform.dispatch.shared.*;

import org.gwtgaebook.CultureShows.shared.dispatch.*;

public class ScheduleShowHandler implements
		ActionHandler<ScheduleShowAction, ScheduleShowResult> {

	@Override
	public ScheduleShowResult execute(ScheduleShowAction action,
			ExecutionContext context) throws ActionException {

		System.out.println("Handler scheduling show " + action.getShowName());

		return new ScheduleShowResult("");
	}

	@Override
	public Class<ScheduleShowAction> getActionType() {
		return ScheduleShowAction.class;
	}

	@Override
	public void undo(ScheduleShowAction action, ScheduleShowResult result,
			ExecutionContext context) throws ActionException {
		// Not undoable
	}

}
}}}

`server/MainHandlerModule.java`
{{{
import org.gwtgaebook.CultureShows.shared.dispatch.*;
import org.gwtgaebook.CultureShows.server.dispatch.*;
...
		// bind Actions to ActionHandlers and ActionValidators
		bindHandler(ScheduleShowAction.class, ScheduleShowHandler.class);
}}}

`LandingPresenter.java`
{{{
...
import com.google.gwt.user.client.rpc.*;
import com.gwtplatform.dispatch.client.*;
import org.gwtgaebook.CultureShows.shared.dispatch.*;
...
       private final DispatchAsync dispatcher;

	@Inject
	public LandingPresenter(EventBus eventBus, MyView view, MyProxy proxy,
			PlaceManager placeManager, DispatchAsync dispatcher) {
		super(eventBus, view, proxy);
		this.placeManager = placeManager;
		this.dispatcher = dispatcher;
		getView().setUiHandlers(this);

	}

	@Override
	public void scheduleShow(Date date, String showName, String locationName) {
		Log.info("Presenter scheduling on " + date.toString() + " the show "
				+ showName + " at location " + locationName);
		dispatcher.execute(new ScheduleShowAction(showName),
				new AsyncCallback<ScheduleShowResult>() {
					@Override
					public void onFailure(Throwable caught) {
						Log.error("Scheduleing show failed "
								+ caught.getMessage());
					}

					@Override
					public void onSuccess(ScheduleShowResult result) {
						Log.info("Scheduled show");
					}
				});
	}

}}}

It works, but it's a lot of code to write just to get a string from client to server, isn't it?

== Auto-generated Action and Result ==
*Pre-requisites*
 * [http://code.google.com/p/gwt-platform/wiki/BoilerplateGeneration#Configuring_your_build_environment Configure your build environment] for annotation processing. This is already setup in the template project.
 * [http://code.google.com/p/gwt-platform/wiki/BoilerplateGeneration#Generate_Action_and_Result Generating Action and Result]

Instead of Action and Result, we can have only `shared/dispatch/ScheduleShow.java`
{{{
package org.gwtgaebook.CultureShows.shared.dispatch;

import com.gwtplatform.annotation.*;

@GenDispatch(isSecure = false)
public class ScheduleShow {
	@In(1)
	String showName;

	@Out(1)
	String response;
}
}}}

== More code cleanup ==
To further reduce the code written for each specific request, we can have an !AsyncCallback wrapper in the form of [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/DispatchCallback.java DispatchCallback]. For now, it can just provide error handling, so we don't have to do that for every call.

Here's the updated !LandingPresenter:
{{{
		dispatcher.execute(new ScheduleShowAction(showName),
				new DispatchCallback<ScheduleShowResult>() {
					@Override
					public void onSuccess(ScheduleShowResult result) {
						Log.info("Scheduled show");
					}
				});
}}}


We can also have a [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/server/dispatch/DispatchActionHandler.java wrapper for ActionHandler]. Using it, `ScheduleShowHandler` becomes
{{{
public class ScheduleShowHandler extends
		DispatchActionHandler<ScheduleShowAction, ScheduleShowResult> {

	@Override
	public ScheduleShowResult execute(ScheduleShowAction action,
			ExecutionContext context) throws ActionException {

		System.out.println("Handler scheduling show " + action.getShowName());

		return new ScheduleShowResult("");
	}

}
}}}

== Protecting against cross-site request forgeries (XSRF) ==

[http://en.wikipedia.org/wiki/Cross-site_request_forgery Cross-site request forgery]

What's the problem we're trying to solve? If Violeta is signed in, and she navigates to badsite.com, then badsite.com can make some actions in our application on behalf of Violeta. Although [http://en.wikipedia.org/wiki/Same_origin_policy same origin policy] prevents badsite.com making !JavaScript calls, badsite.com can still load URLs such as
{{{
<img src="http://cultureshows.appspot.com/logout/" />
}}}
and log out Violeta for example. Other sites might even perform other actions on GET, such as `delete_contact.php?id=14`. 

One way to protect agains XSRF is to allow only requests which have your site as referral. A more effective way is to issue a token on user login, which can be stored by our application client in a cookie and cannot be accessed by badsite.com, then pass this token on each request and have the server check the token validity.

TODO

== Summary ==
To make a call from client to server, you need these parts

 * [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/shared/dispatch/ScheduleShow.java generator for Action and Result data]
 * [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/server/dispatch/ScheduleShowHandler.java server handler]
 * [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/server/MainHandlerModule.java binding of Action to ActionHandler and ActionValidator]
 * the call itself, using `dispatcher.execute()`


= Data model =
*Pre-requisites*
 * [http://code.google.com/p/twig-persist/wiki/Quickstart Quickstart with twig-persist], an Object Datastore for Google App Engine
 * [http://code.google.com/p/twig-persist/wiki/Configuration Creating a Data Model]
 * [http://code.google.com/p/twig-persist/source/browse/src/test/java/com/google/code/twig/festival/MusicFestivalTestCase.java twig unit tests] to see more usage examples

Remember [DataModeling our data modeling] ? Let's code it!

*Theater.java*
{{{
package org.gwtgaebook.CultureShows.shared.model;

import java.util.*;

import com.google.code.twig.annotation.*;

public class Theater {
	public String name;
	public String URL;
	public String language;

	public Set<Show> shows;
}
}}}

*Show.java* 
{{{
package org.gwtgaebook.CultureShows.shared.model;

public class Show {
	public String name;
	public String URL;

}
}}}

Here are [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/shared/model/ complete data models].

= Storing data =
In our server handler, we'll do
{{{
import com.google.appengine.api.datastore.Key;
import com.google.code.twig.*;
import com.google.code.twig.annotation.*;
...
		Show show = new Show();
		show.name = action.getShowName();

		ObjectDatastore ds = new AnnotationObjectDatastore();
		Key showKey = ds.store(show);
}}}

After scheduling a show, go to [http://127.0.0.1:8888/_ah/admin your local datastore viewer] and check that it has been saved. Besides data model fields (name, URL), you'll see two more fields, [http://code.google.com/appengine/docs/python/datastore/keysandentitygroups.html Key and ID/Name].

= Linking shows to a theater =
Shows belong to theaters. In a regular app, we would have asked Violeta to perform the following steps:
 * sign up
 * create a theater and specify theater details such as name, website URL
 * define shows and locations assigned to the theater defined above
 * and at last, schedule a show

We can do better! We're simply asking Violeta to schedule a show. If she decides to sign in, we'll preserve the data for her. We'll take care of the details behind the scenes (pun intended :-), even though that's more work for us, the engineers.

== Exercise ==
Think for 5 minutes how we can make this work.

= Exercise solution =
Here are two possible solutions:
 # store all data on the client until Violeta signs in. One way to store it would be directly in GWT, but we'd lose it all on a page refresh. Another way to store it would be using [http://php-html.net/tutorials/html5-local-storage-guide/ HTML5 web storage] or even cookies since the data amount is small.
 # store data on server by creating entities as soon as they are needed and use a cookie to link them to current anonymous user session. On sign in, assign these entities to the authenticated user.

We'll go with the server solution, as we need to write that code anyway. It will also work on older browsers. We need to be careful to have a script ran periodically which cleans up saved data not assigned to users.

Let us write down some [http://en.wikipedia.org/wiki/Pseudocode pseudocode] of how `ScheduleShowHandler` would work when we'll have full functionality:
{{{
//data received from client: userToken, theaterKey, showName, locationName and date

anonymous = (user is not signed in)

if (anonymous) {
	check userToken to be in form of "anonymous_RandomNumber", exception if not.
	//prefix prevents client setting valid user IDs and overwriting their data
	userId = userToken
} else {
	userId = AppEngineUser.getId()
}

if (theaterKey is empty) {
	create theater instance with name "anonymous-YYYY-MM-DD-{random}"
	theaterKey = store(theater)
	create member(userId)
	assign member to theater with role administrator
}

verify that userId has access to theaterKey, exception if not

showKey = find(showName assigned to theaterKey)
if (showKey is empty) {
	create and store show 
}

//same with location

create schedule entry (showKey, locationKey, date) assigned to theaterKey

return theaterKey, showKey, locationKey
}}}


= Exercise =
Enhance show scheduling to actually store not only shows, but also locations and schedule. 


= Exercise solution =
...

= Resources =
 * [http://code.google.com/appengine/docs/java/datastore/ App Engine Datastore Java API]
 * [http://borglin.net/gwt-project/?page_id=604  A comparison of persistence frameworks]  for App Engine, [http://code.google.com/p/twig-persist/wiki/Comparison another comparison]


<img src="http://gwt-gae-book.googlecode.com/svn/wiki/assets/envelope.png" border="0"  /><a href="http://code.google.com/p/gwt-gae-book/issues/entry">Send feedback</a>