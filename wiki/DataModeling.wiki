<wiki:toc max_depth="2" />

<img src="http://gwt-gae-book.googlecode.com/svn/wiki/images/statue_series_1.jpg" border="0"  align="left" />

By now we have a pretty good idea about what our application should do and how it would look. We can start thinking about how to implement it.

= Data modeling =

Almost all applications are usually working with data, even if they don't actually store it and just pass it around as a [http://en.wikipedia.org/wiki/Mashup_(web_application_hybrid) mashup]. Thinking about [http://en.wikipedia.org/wiki/Data_modeling data modeling] gets us started on [http://en.wikipedia.org/wiki/Software_design software design].

To keep it light, doing an 
[http://en.wikipedia.org/wiki/Entity_relationship_model entity relationship model] will be enough for a small application. After all, we'd like to get to launch it sometime soon instead of writing docs all week, right?

== Exercise ==
On a piece of paper, draft the Culture Shows entity relationship model before going further.

== Exercise solution: Entity relationship model ==
[http://gwt-gae-book.googlecode.com/svn/wiki/assets/CultureShowsERM.png]

Google Docs (Drawing) was used to build this.
== Notes ==
A member is part of a theater with a role (administrator, artist, assistant). 

A theater has shows, locations and performances. A performance consists of a show held in a location at a date and time.

Try to avoid generic entities such as "User". Besides Member, here we might also have Spectator (Claus).

<img src="http://gwt-gae-book.googlecode.com/svn/wiki/assets/envelope.png" border="0"  /><a href="http://code.google.com/p/gwt-gae-book/issues/entry">Send feedback</a>