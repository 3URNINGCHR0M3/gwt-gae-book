#summary Managing locations with REST APIs

We discussed about [SoYouHaveAnIdea clarifying your ideas before writing code] and [GettingStarted setting up the development environment]. We built [BuildingLandingPage a landing page] which [ClientServer communicates with App Engine back-end] and [Authentication authenticates members], and implemented [ManagingPerformances managing performances schedule], resulting in [http://cultureshows.appspot.com/ a sample application] with [QualityAssurance reasonable quality]. We've also added [ManagingShows theater show management] and enabled theater owners to [ExposingData display performances on their own websites] with the help of an YQL mashup.

Next, we'll cover REST web services.
 
<wiki:toc max_depth="2" />


<img src="http://gwt-gae-book.googlecode.com/svn/wiki/images/doi_dintre_noi6.jpg" border="0"  align="right" />

= About REST =

Web services have several [http://en.wikipedia.org/wiki/Web_service#Styles_of_use styles of use]. So far we used [http://en.wikipedia.org/wiki/Remote_procedure_call remote procedure calls] to manage shows and other client-server interaction. 

[http://en.wikipedia.org/wiki/Representational_State_Transfer REST], with [http://en.wikipedia.org/wiki/JSON JSON] data format, is now the de facto architecture of web services. We will manage theater locations using a REST architecture.

= Exposing REST web services with App Engine = 
[ExposingData We already saw] how to implement reading the performances list with REST. Following the same pattern, locations APIs are built by
 * implementing  [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/server/api/LocationsResource.java Locations] and [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/server/api/LocationResource.java Location] resources
 * [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/server/APIRouter.java attaching routes] from URLs to resources


= Consuming REST services with GWT =
Besides [http://code.google.com/p/gwt-platform/ GWTP dispatch], we'll use [http://google-web-toolkit.googlecode.com/svn/javadoc/2.1/com/google/gwt/http/client/RequestBuilder.html RequestBuilder] and [http://code.google.com/p/piriti/ piriti] to work with REST services from GWT. 

After implementing some [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/#client%2Fdispatch generic helper classes], in order to handle each client-server call, we should 
 # define [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/locations/#locations%2Fmodel JSON models] for sending and receiving data (see [http://code.google.com/p/piriti/issues/detail?id=22 proposed enhancement])
 # write a [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/locations/dispatch/ReadLocations.java generator for Action and Result data]
 # write [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/locations/dispatch/ a handler] which
  * sets `RequestBuilder` data (url, headers, body)
  * extracts the result by parsing the response body according to given model (this is generic, might be implemented by `AbstractRequestBuilderClientActionHandler`)
 # [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/RESTHandlerRegistry.java register the handler] (see [http://groups.google.com/group/gwt-platform/browse_thread/thread/df016bb90190f9af# discussion])
 # [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/locations/LocationPresenter.java run] regular gwtp dispatch.execute()


= RPC vs REST =


by implementing your required functionality, you have APIs for 3rd parties
firebug debug
automated API testing
jMeter perf testing
API monitoring



Building a new GWT/GAE app - 2 separate projects.


Let me conclude this section with a wish: Dear GAE and GWT developers, please make REST services simpler to expose from App Engine and consume from GWT. Some specific requests:
 * (GAE) have support for restlet-like functionality out of the box (or something like the internal tool shown at [http://www.youtube.com/watch?v=nyu5ZxGUfgs How Google builds APIs])
 * (GWT) support piriti-like functionality for working with JSON ([GWTREST piriti is easier to use than AutoBean]
 * (GWT) have a framework built around RequestBuilder and JSON for easily communicating with REST services (see the 5 steps above required now)


= Web services best practices =

Good web services are explorable (maybe through a discovery API), predictable, consistent. Here are some best practices on building web services:

 * [http://www.youtube.com/watch?v=nyu5ZxGUfgs How Google builds APIs]
 * [http://www.youtube.com/watch?v=VVovVjT_H8A The interaction design of APIs]
 * [http://www.readwriteweb.com/hack/2010/11/clay-loveless-understanding-ap.php Understanding API Usage] 
 * [http://www.infoq.com/presentations/SOA-Business-Autonomous-Components Avoid a Failed SOA: Business & Autonomous Components to the Rescue]

Other practices include versioning, working with API keys, supporting partial operations and custom verbs.


= Additional resources =
 * [http://stackoverflow.com/questions/76595?tab=votes#tab-top SOAP vs. REST]
 * [GWTREST Alternatives on consuming REST services with GWT]