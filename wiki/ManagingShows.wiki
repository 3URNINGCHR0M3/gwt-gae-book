#summary Managing shows

So far, we have a reasonable quality web app which can be fully manage a theater performances schedule. Next, we'll implement managing shows.

<wiki:toc max_depth="2" />

= Mockup =

Here's how managing shows UI could look

<img src="http://gwt-gae-book.googlecode.com/svn/wiki/assets/shows.png" border="2" style="border: 2;" />

Note the introduction of Performances and Shows navigation at the top.

= Adding a new package =


*Pre-requisites*
 * [http://code.google.com/p/gwt-platform/wiki/GettingStarted?tm=6#Blocking_some_presenters GWTP gatekeepers]


Since accessing the Shows view requires to be signed in, let's add a [gatekeeper]:
{{{
public class SignedInGatekeeper implements Gatekeeper {

	@Inject
	private ClientState clientState;

	@Override
	public boolean canReveal() {

		if (null != clientState.userInfo) {
			if (clientState.userInfo.isSignedIn) {
				return true;
			}
		}

		return false;
	}
}
}}}


We'll basically duplicate [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/landing/  the landing package] structure. Here are the steps:
 * create a `shows` package, with the same files as in `landing`, and change the class names
 * add [ShowModule] to the [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/MainGinjector.java Gin Injector]
 * add `SignedInGatekeeper` and `ShowPresenter` to [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/MainGinjector.java MainGinjector]
 * add a new "shows" [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/NameTokens.java name token]
 * [update HeaderView] to add Performances and Shows navigation
{{{
		<g:InlineHyperlink ui:field="performances" addStyleNames="{style.anchor}" visible="false"
			targetHistoryToken="{nameTokens.getLanding}">Performances</g:InlineHyperlink>
		<g:InlineHyperlink ui:field="shows" addStyleNames="{style.anchor}" visible="false"
			targetHistoryToken="{nameTokens.getShows}">Shows</g:InlineHyperlink>
}}}



As shows view isn't needed on the very first access of the landing page, we'll also [http://code.google.com/p/google-web-toolkit/wiki/CodeSplitting split its code] into separate files, to be loaded by GWT on demand, with `@ProxyCodeSplit` annotation:
{{{
public class ShowPresenter extends
		Presenter<ShowPresenter.MyView, ShowPresenter.MyProxy> implements
		ShowUiHandlers {

	@ProxyCodeSplit
	@NameToken(NameTokens.shows)
	@UseGatekeeper(SignedInGatekeeper.class)
	public interface MyProxy extends ProxyPlace<ShowPresenter> {
	}

	...
}
}}}



<wiki:comment>NAV_START</wiki:comment>
<a href='http://code.google.com/p/gwt-gae-book/issues/entry'><img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/envelope.png' border='0' title='Send feedback' /></a>
<img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/spacer.png' border='0' />
<a href='http://code.google.com/p/gwt-gae-book/wiki/QualityAssurance'><img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/prev.png' border='0' title='Previous chapter: Quality assurance' /></a>
<a href='http://code.google.com/p/gwt-gae-book/wiki/TableOfContents'><img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/contents.png' border='0' title='Table Of Contents' /></a>
<a href='http://code.google.com/p/gwt-gae-book/wiki/ExposingData'><img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/next.png' border='0' title='Next chapter: Exposing read-only data to 3rd parties' /></a>
<wiki:comment>NAV_END</wiki:comment>