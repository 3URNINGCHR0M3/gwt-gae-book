#summary Authentication with OpenID

<wiki:toc max_depth="2" />

<img src="http://gwt-gae-book.googlecode.com/svn/wiki/images/vintage_keys.jpg" border="0"  align="right" />

= Signing in using OpenID =
*Pre-requisites*

 * [http://en.wikipedia.org/wiki/OpenID OpenID introduction]
 * [http://code.google.com/appengine/docs/java/users/overview.html AppEngine Users Java API overview]
 * [http://code.google.com/intl/nl-NL/appengine/articles/openid.html Using federated authentication via OpenID]

Here are the steps to add authentication support
 # define [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/shared/model/UserInfo.java UserInfo] model, used to send user information from server to client 
 # [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/MainModule.java bind UserInfo] as [http://google-guice.googlecode.com/svn/trunk/javadoc/com/google/inject/Binder.html Guice Singleton]. This will make an !UserInfo instance persist in all client, as if it were a static class. TODO true?
 # define !GetUser [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/shared/dispatch/GetUser.java action/result generator] and [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/server/dispatch/GetUserHandler.java handler], [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/server/MainHandlerModule.java bind them]
{{{
	public GetUserResult execute(GetUserAction action, ExecutionContext context)
			throws ActionException {

		UserInfo userInfo = new UserInfo();

		UserService userService = UserServiceFactory.getUserService();
		User user = userService.getCurrentUser();

		if (user != null) {
			userInfo.isSignedIn = true;
			userInfo.signOutURL = userService.createLogoutURL(action
					.getRequestURI());
			userInfo.email = user.getEmail();
			userInfo.userId = user.getUserId();
		} else {
			userInfo.isSignedIn = false;
			userInfo.signInURLs.put("Google", userService.createLoginURL(action
					.getRequestURI(), null, "google.com/accounts/o8/id", null));
			userInfo.signInURLs.put("Yahoo", userService.createLoginURL(action
					.getRequestURI(), null, "yahoo.com", null));
		}

		return new GetUserResult("", userInfo);
}
}}}
 # in `LandingPage` presenter, get user info from server
{{{
		dispatcher.execute(new GetUserAction(Window.Location.getHref()),
				new DispatchCallback<GetUserResult>() {
					@Override
					public void onSuccess(GetUserResult result) {
						if (!result.getErrorText().isEmpty()) {
							// TODO have a general handler for this
							Window.alert(result.getErrorText());
							return;
						}
						setUserInfo(result.getUserInfo());
					}
				});
...

	public void setUserInfo(UserInfo userInfo) {
		this.userInfo = userInfo;
		getView().setSignInOut(userInfo);
	}
}}}
 # in `LandingPage` View have a basic UI for signing in/out
{{{
	@UiField
	HTML signInOut;

	public void setSignInOut(UserInfo userInfo) {
		String html;
		if (userInfo.isSignedIn) {
			html = userInfo.email + " | " + "<a href='" + userInfo.signOutURL
					+ "'>Sign Out</a>";
		} else {
			html = "<a href='" + userInfo.signInURLs.get("Google")
					+ "'>Sign In with Google</a>" + " | " + "<a href='"
					+ userInfo.signInURLs.get("Yahoo")
					+ "'>Sign In with Yahoo</a>";

		}
		signInOut.setHTML(html);

	}
}}}

It's really that easy. The result?

_Signed out_ <br/>
<img src="http://gwt-gae-book.googlecode.com/svn/wiki/assets/signedOut.png" border="1"  />

-----

_Signing in with Google_ <br/>
<img src="http://gwt-gae-book.googlecode.com/svn/wiki/assets/signingInG.png" border="1"  />

-----

_Signed in with Google_ <br/>
<img src="http://gwt-gae-book.googlecode.com/svn/wiki/assets/signedInG.png" border="1"  />

-----

_Signing in with Yahoo_ <br/>
<img src="http://gwt-gae-book.googlecode.com/svn/wiki/assets/signingInY.png" border="1"  />

-----

_Signed in with Yahoo_ <br/>
<img src="http://gwt-gae-book.googlecode.com/svn/wiki/assets/signedInY.png" border="1"  />


App Engine supports more !OpenID providers. To keep the UI usable, we'll limit the options to the most popular two.

= Updating UI to accommodate authentication =

As you keep adding functionality, you also need to consider what are the final goals you need to reach with your app and consider refactoring in order to better support those goals (be careful not to [http://en.wikipedia.org/wiki/Overengineering overengineer] it).

== Goals ==
What are the goals we're trying to accomplish?
 * have multiple places (such as Landing page), each with the same header
  * some accessible by anonymous users (e.g. Landing page, About Culture Shows)
  * some restricted to signed in users, and maybe with some specific permissions
 * sometimes content depends on user signed in state or permissions (e.g. header will show Sign In or Sign Out links)
 * app can be initialized from any place, not just the default (if somebody bookmarked it or hits browser refresh)
 * sign in/out can be triggered from any place, should return to that place 
 
== Refactoring ==

Let's introduce a Main presenter & view, which will contain a Header and a Main content placeholder. All relevant contents from Landing are moved to these new entities, leaving here just show scheduling.
Here's the [http://code.google.com/p/gwt-gae-book/source/detail?spec=svn372&r=372 full refactoring changelist].

== Custom events ==
*Pre-requisites*
 * [http://arcbees.wordpress.com/2010/08/24/gwt-platform-event-best-practice/ Custom events with gwt-platform]

We were already getting user info and setting the header depending on user state. There are more places though which depend on it, e.g. Sign In button on the right of Landing page. We'll let Main presenter initiate getting user info, and when that's received fire a [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/event/UserInfoAvailableEvent.java UserInfoAvailableEvent] :

{{{

	@Override
	protected void onBind() {
		super.onBind();

		dispatcher.execute(new GetUserAction(Window.Location.getHref()),
				new DispatchCallback<GetUserResult>() {
					@Override
					public void onSuccess(GetUserResult result) {
						if (!result.getErrorText().isEmpty()) {
							Window.alert(result.getErrorText());
							return;
						}
						setUserInfo(result.getUserInfo());
					}
				});

	}

	public void setUserInfo(UserInfo userInfo) {
		this.userInfo = userInfo;
		UserInfoAvailableEvent.fire(this, userInfo);
	}
}}}

Interested parties can listen to this event and handle it as desired. For example, the Header will do
{{{
	@Override
	protected void onBind() {
		super.onBind();

		addRegisteredHandler(UserInfoAvailableEvent.getType(),
				new UserInfoAvailableHandler() {
					@Override
					public void onHasUserInfoAvailable(
							UserInfoAvailableEvent event) {
						setSignInOut(event.getUserInfo());

					}
				});
	}

	public void setSignInOut(UserInfo userInfo) {
		getView().setSignInOut(userInfo);
	}

}}}


<img src="http://gwt-gae-book.googlecode.com/svn/wiki/images/vis_3.jpg" border="0"  align="right" />

=== Exercise ===
Change Landing so it displays Sign In button only if user is not signed in.

=== Exercise solution ===
[http://code.google.com/p/gwt-gae-book/source/detail?spec=svn376&r=376 Changelist]

= Enhancing sign in experience =

== Custom widgets ==


= Migrating stored anonymous data to signed in users =





<img src="http://gwt-gae-book.googlecode.com/svn/wiki/assets/envelope.png" border="0"  /><a href="http://code.google.com/p/gwt-gae-book/issues/entry">Send feedback</a>