#summary Authentication with OpenID

<wiki:toc max_depth="2" />

= Signing in =
*Pre-requisites*

[http://en.wikipedia.org/wiki/OpenID OpenID introduction]

[http://code.google.com/appengine/docs/java/users/overview.html AppEngine Users Java API overview]

[http://code.google.com/intl/nl-NL/appengine/articles/openid.html Using federated authentication via OpenID]



Here are the steps to add authentication support
 # define [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/shared/model/UserInfo.java UserInfo] model, used to send user information from server to client 
 # [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/MainModule.java bind UserInfo] as [http://google-guice.googlecode.com/svn/trunk/javadoc/com/google/inject/Binder.html Guice Singleton]. This will make an UserInfo instance persist in all client, as if it were a static class. TODO true?
 # define GetUser [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/shared/dispatch/GetUser.java action/result generator] and [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/server/dispatch/GetUserHandler.java handler], [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/server/MainHandlerModule.java bind them]
 # in `LandingPage` presenter, get user info from server
{{{
		dispatcher.execute(new GetUserAction(GWT.getHostPageBaseURL()),
				new DispatchCallback<GetUserResult>() {
					@Override
					public void onSuccess(GetUserResult result) {
						if (!result.getErrorText().isEmpty()) {
							// TODO have a general handler for this
							Window.alert(result.getErrorText());
							return;
						}
						setUserInfo(result.getUserInfo());
					}
				});
...

	public void setUserInfo(UserInfo userInfo) {
		this.userInfo = userInfo;
		Log.info("User isSignedIn " + userInfo.isSignedIn.toString()
				+ " with email " + userInfo.email + " username "
				+ userInfo.userId);
		Log.info("Sign In URLs " + userInfo.signInURLs.toString()
				+ " Sign Out URL " + userInfo.signOutURL);
		getView().setSignInOut(userInfo);
	}
}}}
 # in `LandingPage` View have a basic UI for signing in/out
{{{
	public void setSignInOut(UserInfo userInfo) {
		String html;
		if (userInfo.isSignedIn) {
			html = userInfo.email + " | " + "<a href='" + userInfo.signOutURL
					+ "'>Sign Out</a>";
		} else {
			html = "<a href='" + userInfo.signInURLs.get("Google")
					+ "'>Sign In with Google</a>" + " | " + "<a href='"
					+ userInfo.signInURLs.get("Yahoo")
					+ "'>Sign In with Yahoo</a>";

		}
		signInOut.setHTML(html);

	}
}}}

It's really that easy.

= Updating UI to accommodate authentication =


= Migrating stored anonymous data to signed in users =





<img src="http://gwt-gae-book.googlecode.com/svn/wiki/assets/envelope.png" border="0"  /><a href="http://code.google.com/p/gwt-gae-book/issues/entry">Send feedback</a>