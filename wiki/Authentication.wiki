#summary Authentication with OpenID

We discussed about [SoYouHaveAnIdea clarifying your ideas before writing code] and [GettingStarted setting up the development environment]. Having built  [BuildingLandingPage a landing page] which [ClientServer communicates with App Engine back-end], we'll work next on authentication for our users.

<wiki:toc max_depth="2" />

<img src="http://gwt-gae-book.googlecode.com/svn/wiki/images/vintage_keys.jpg" border="0"  align="right" />

Although it's possible to develop App Engine applications with custom authentication (e.g. using your own username/password lookup, or by connecting to custom 3rd party web services), we'll focus on OpenID.

= Signing in using OpenID =
*Pre-requisites*

 * [http://en.wikipedia.org/wiki/OpenID OpenID introduction]
 * [http://code.google.com/appengine/docs/java/users/overview.html AppEngine Users Java API overview]
 * [http://code.google.com/appengine/articles/openid.html Using federated authentication via OpenID]

Here are the steps to add authentication support
 # define [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/shared/model/UserInfo.java UserInfo] model, used to send user information from server to client 
 # define [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/shared/dispatch/GetUser.java GetUser action/result generator] and [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/server/dispatch/GetUserHandler.java handler], [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/server/MainHandlerModule.java bind them]. The handler contains
{{{
	public GetUserResult execute(GetUserAction action, ExecutionContext context)
			throws ActionException {

		UserInfo userInfo = new UserInfo();

		UserService userService = UserServiceFactory.getUserService();
		User user = userService.getCurrentUser();

		if (user != null) {
			userInfo.isSignedIn = true;
			userInfo.signOutURL = userService.createLogoutURL(action
					.getRequestURI());
			userInfo.email = user.getEmail();
			userInfo.userId = user.getUserId();
		} else {
			userInfo.isSignedIn = false;
			userInfo.signInURLs.put("Google", userService.createLoginURL(action
					.getRequestURI(), null, "google.com/accounts/o8/id", null));
			userInfo.signInURLs.put("Yahoo", userService.createLoginURL(action
					.getRequestURI(), null, "yahoo.com", null));
		}

		return new GetUserResult("", userInfo);
}
}}}
 # in [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/landing/LandingPresenter.java LandingPresenter], get user info from server
{{{
		dispatcher.execute(new GetUserAction(Window.Location.getHref()),
				new DispatchCallback<GetUserResult>() {
					@Override
					public void onSuccess(GetUserResult result) {
						if (!result.getErrorText().isEmpty()) {
							// TODO have a general handler for this
							Window.alert(result.getErrorText());
							return;
						}
						clientState.userInfo = result.getUserInfo();
						onGetUserSuccess();
					}
				});
	...

	public void onGetUserSuccess() {
		Main.logger.info("onGetUserSuccess: User isSignedIn "
				+ clientState.userInfo.isSignedIn.toString() + " with email "
				+ clientState.userInfo.email + " username "
				+ clientState.userInfo.userId);

		if (clientState.userInfo.isSignedIn) {
			...
		} else {
			getView().setUserInfo(clientState.userInfo);
		}
	}
}}}
 # in [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/landing/LandingView.java LandingPage]`  have an UI for signing in
{{{
	private UserInfo userInfo;

	public void setUserInfo(UserInfo userInfo) {
		this.userInfo = userInfo;
		if (!userInfo.isSignedIn) {
			signInContainer.setVisible(true);
		}
	}

	@UiHandler("googleSignIn")
	void onGoogleSignInClicked(ClickEvent event) {
		Main.logger.info("redirecting to " + userInfo.signInURLs.get("Google"));
		Window.Location.replace(userInfo.signInURLs.get("Google"));
	}

	@UiHandler("yahooSignIn")
	void onYahooSignInClicked(ClickEvent event) {
		Window.Location.replace(userInfo.signInURLs.get("Yahoo"));
	}
}}}

It's really that easy. The result?

_Signed out_ <br/>
<img src="http://gwt-gae-book.googlecode.com/svn/wiki/assets/landingApp.png" border="1"  />

-----

_Signing in with Google_ <br/>
<img src="http://gwt-gae-book.googlecode.com/svn/wiki/assets/signingInG.png" border="1"  />

-----

_Signing in with Yahoo_ <br/>
<img src="http://gwt-gae-book.googlecode.com/svn/wiki/assets/signingInY.png" border="1"  />

-----


App Engine supports more !OpenID providers. To keep the UI usable, we'll limit the options to the most popular two.

 
<img src="http://gwt-gae-book.googlecode.com/svn/wiki/images/architecture.jpg" border="0"  align="right" />


= Custom widgets & events =
*Pre-requisites*
 * [http://code.google.com/p/gwt-platform/wiki/GettingStarted?tm=6#Presenter_widgets Presenter widgets]
 * [http://arcbees.wordpress.com/2010/08/24/gwt-platform-event-best-practice/ Custom events with gwt-platform]

We are getting user info in [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/landing/LandingPresenter.java LandingPresenter], but once the user info is available we need to notify other places, such as [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/widget/HeaderPresenter.java HeaderPresenter]. Our header is empty by default, but when it receives a notification with user info, it will set the appropriate content, such as username.

Therefore, let's define a [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/event/UserInfoAvailableEvent.java UserInfoAvailableEvent] :

{{{
public class UserInfoAvailableEvent extends
		GwtEvent<UserInfoAvailableEvent.UserInfoAvailableHandler> {

	public interface HasUserInfoAvailableHandlers extends HasHandlers {
		HandlerRegistration addUserInfoAvailableHandler(
				UserInfoAvailableHandler handler);
	}

	public interface UserInfoAvailableHandler extends EventHandler {
		void onHasUserInfoAvailable(UserInfoAvailableEvent event);
	}

	private static Type<UserInfoAvailableHandler> TYPE = new Type<UserInfoAvailableHandler>();

	public static Type<UserInfoAvailableHandler> getType() {
		return TYPE;
	}

	@Override
	public Type<UserInfoAvailableHandler> getAssociatedType() {
		return TYPE;
	}

	@Override
	protected void dispatch(UserInfoAvailableHandler handler) {
		handler.onHasUserInfoAvailable(this);
	}

	public static void fire(HasHandlers source, ClientState clientState) {
		if (TYPE != null) {
			source.fireEvent(new UserInfoAvailableEvent(clientState));
		}
	}

	private ClientState clientState;

	public UserInfoAvailableEvent(ClientState clientState) {
		this.clientState = clientState;
	}

	public ClientState getClientState() {
		return this.clientState;
	}

}
}}}


which will be fired by [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/landing/LandingPresenter.java LandingPresenter] when user info is received:

{{{
	public void onGetUserSuccess() {
		...

		UserInfoAvailableEvent.fire(this, clientState);

		...

	}
}}}

Interested parties can listen to this event and handle it as desired. For example, [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/widget/HeaderPresenter.java HeaderPresenter] widget will do
{{{
	@Override
	protected void onBind() {
		super.onBind();

		addRegisteredHandler(UserInfoAvailableEvent.getType(),
				new UserInfoAvailableHandler() {
					@Override
					public void onHasUserInfoAvailable(
							UserInfoAvailableEvent event) {
						onUserInfoAvailable(event.getClientState());

					}
				});
	}

	public void onUserInfoAvailable(ClientState clientState) {
		this.clientState = clientState;
		getView().setClientState(clientState);
	}

}}}


<img src="http://gwt-gae-book.googlecode.com/svn/wiki/images/vis_3.jpg" border="0"  align="right" />




= Getting user info on server handlers =
Since we'll start needing user info on more calls on server, we'll introduce a [http://google-guice.googlecode.com/svn/trunk/javadoc/com/google/inject/Provider.html Guice Provider] for it: [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/server/UserInfoProvider.java UserInfoProvider]
{{{
public class UserInfoProvider implements Provider<UserInfo> {

	public UserInfo get() {
		UserInfo userInfo = new UserInfo();

		UserService userService = UserServiceFactory.getUserService();
		User user = userService.getCurrentUser();

		if (user != null) {
			userInfo.isSignedIn = true;
			userInfo.email = user.getEmail();
			userInfo.userId = user.getUserId();
		} else {
			userInfo.isSignedIn = false;
		}

		return userInfo;
	}
}

}}}

The Handler constructors will be called only once per instance, not once per request. Since we need fresh user info on each request to see if the user is actually signed in or not, we'll inject the provider and get user info manually in execute() :
{{{
	@Inject
	public GetUserHandler(final Provider<UserInfo> userInfoProvider,
			final ObjectDatastore datastore) {
		super(userInfoProvider, datastore);
	}

	@Override
	public GetUserResult execute(GetUserAction action, ExecutionContext context)
			throws ActionException {

		UserInfo userInfo = userInfoProvider.get();
		...
	}
}}}


== Design of handling both anonymous and authenticated users ==

We'll need to change `GetUserHandler` to handle anonymous users, authenticated users and migrating data from anonymous to authenticated if needed. We'll let the client always set whatever `UserToken` is returned by `GetUserHandler` and have the logic for setting it on the server.

We also need to update `LandingPresenter` to get performances both on presenter reveal (e.g. returning to landing page from another place in app) and on `UserInfoAvailableEvent`. Scheduling performances is pretty much ok as it is now, since we designed with this use case in mind.

So what are the use cases which need to handled by `GetUserHandler`?
 * anonymous user: preserve token if given, otherwise generate a token
 * returning anonymous user, has performances - need to know theaterKey (assuming it won't be in cookie anymore)
 * anonymous user which has performances, but is also registered and has performances as registered member too
 * user signed in with `UserToken` set (need to update member data)
 * user signed in, without `UserToken` set


With this in mind, the pseudocode for `GetUserHandler` could be like this:
{{{
userTokenOut = null

if userToken not empty
	find member where userId = "anonymous" + userToken
	if member exists
		// has a member record from anonymous usage
		// does he have a previous registered member too? if yes, merge anonymous data into registered
		if isSignedIn
			find signedInMember
			if found
				update tmjs to signedInMember
				delete anonymousMember
			else
				update member set userId


if isSignedIn && null = member
	find member by userId
	

if (null != member)
	get theaters member has access to		

if (!isSignedIn)
	if userToken
		userTokenOut = userToken
	else
		userTokenOut = random
}}}


What do think? Yep, it starts getting messy and very prone to bugs. Just like real-life projects :) You need to continuously watch out for situations like this. It's good we realize the complexity from pseudocode, rather than from written and debugged code. Rather than getting absorbed in delivering, let's step back for a moment and see if we can [http://en.wikipedia.org/wiki/KISS_principle keep it simple].

== Refactoring of... requirements! ==
To simplify, we need to introduce some constraints.

=== Exercise two ===
Think what constraints can we introduce in our requirements.

=== Exercise two solution ===
We could simplify a little by always having a Member record for signed in users. Maybe we could have all the `UserToken` logic in `ScheduleShowHandler`, since we don't need it if there are no performances saved, right? Or we could move all the anonymous user handling on the client, and on signing in just save the data. Still not simple enough.

What was the reason we let Violeta schedule shows without being signed in? To lower the user entry barrier. Well, with OpenID, that barrier is just two mouse clicks high: sign in and authorize our app. Let's do this:
 * allow only signed in users to schedule shows
 * let anonymous users fill the landing page data, but on 'Schedule show' prompt them to sign in. When coming back to app after signing in, save the data for them.
 
= Updated application design =
So our first approach wasn't the best possible. Probably this re-design isn't perfect either, but as long as it's better than the initial one, we're good. Let's create [http://code.google.com/p/gwt-gae-book/source/browse/#svn/branches/CultureShows-allow-anonymous-scheduling/CultureShows a branch] with old code, [http://code.google.com/p/gwt-gae-book/downloads/detail?name=CultureShows-0.2-allow-anonymous-scheduling.tgz an archive], and move on! All stories in our [http://code.google.com/p/gwt-gae-book/wiki/SoYouHaveAnIdea#Culture_Shows_product_backlog_(for_real) backlog] remain valid.


== !GetUserHandler pseudocode ==
{{{
get userInfo
if isSignedIn
	get signOutURL
	check if user has a Member record, create one if not
	get theaters member has access to
else
	get signInURLs
}}}

== !MainPresenter pseudocode ==
{{{
request GetUser

on GetUserSuccess
	set UserInfo, including 
		theaters member has access to
		currentTheaterKey (first from the list)
	UserInfoAvailableEvent.fire
}}}


== !LandingPresenter pseudocode ==
{{{
on ScheduleShow request
	if isSignedIn
		make the server request
	else
		save Performance data in cookie so it is available on user return 
		ask user to sign in instead of making the server request

onUserInfoAvailable
	getView.setSignInOut

	if user isSignedIn
		if Performance data exists in cookie
			request ScheduleShow //it will add to currentTheaterKey if set
			remove Performance data in cookie
		if theaterKey is set
			request GetPerformances

on ScheduleShowSuccess
	set theaterKey returned by server
}}}



== !ScheduleShowHandler pseudocode ==
{{{
//called only when user isSignedIn
//data received from client: theaterKey (may be empty), date, showName, locationName

load member record, exception if it does not exist

// setup theater
if (theaterKey is not empty) {
	load theater //might not exist, key may be invalid
	if (null == theater) {
		theaterKey = null	
	} else {
		verify memberKey has access to theater, exception if not
	}
}

if (theaterKey is empty) {
	create theater instance
	theaterKey = store(theater)
	assign member to theater with role administrator
}

// setup show
showKey = find(showName assigned to theaterKey)
if (showKey is empty) {
	create and store show with parent=theater 
}

// setup location...

store(performance)

return theaterKey, performance
}}}

For implementation, see [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/ latest source code].



<wiki:comment>NAV_START</wiki:comment>
<a href='http://code.google.com/p/gwt-gae-book/issues/entry'><img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/envelope.png' border='0' title='Send feedback' /></a>
<img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/spacer.png' border='0' />
<a href='http://code.google.com/p/gwt-gae-book/wiki/ListingSchedule'><img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/prev.png' border='0' title='Previous chapter: Listing saved performances' /></a>
<a href='http://code.google.com/p/gwt-gae-book/wiki/TableOfContents'><img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/contents.png' border='0' title='Table Of Contents' /></a>
<a href='http://code.google.com/p/gwt-gae-book/wiki/ManagingPerformances'><img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/next.png' border='0' title='Next chapter: Updating and deleting performances' /></a>
<wiki:comment>NAV_END</wiki:comment>