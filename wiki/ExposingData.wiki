#summary Exposing read-only data to 3rd parties

So far we have the possibility to manage performances and shows. The purpose we started this application was to be able to display this data on various theater websites, and this what we'll do next.

<wiki:toc max_depth="2" />

= Exposing performances data as JSON =

First, [http://code.google.com/p/gwt-gae-book/source/checkout checkout the latest version of the CultureShows code] and go through the reading list below.

*Pre-requisites*
 * [http://en.wikipedia.org/wiki/JSON JSON]
 * [http://code.google.com/p/google-gson/ Converting Java Objects into JSON representation]
 * [http://www.restlet.org/ Restlet, a RESTful web framework for Java]
 * [http://www.2048bits.com/2008/06/creating-simple-web-service-with.html Creating a simple web service with Restlet]
 * [http://code.google.com/p/taoki Taoki, small library to use Restlet with Guice] and [http://code.google.com/p/taoki/wiki/Configuration user guide]

Ideally, we would want to have an URL like
{{{
http://cultureshows.appspot.com/api/v1/theaters/theaterKey/performances
}}}
which would list all the upcoming performances for the theater key given in the path. We will include `Show` and `Location` entities in the `Performance` data too, the reason being shown later in this chapter.


Let's setup the infrastructure to use restlet with taoki, as described in the [http://code.google.com/p/taoki/wiki/Configuration taoki user guide]:
 * add a [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/server/APIServlet.java new servlet]
{{{
public class APIServlet extends RestletServlet {
	@Override
	protected GuiceRouter createRouter(Injector injector, Context context) {
		return new APIRouter(injector, context);
	}
}
}}}

 * update [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/server/DispatchServletModule.java DispatchServletModule] to handle the API path too
{{{
	public void configureServlets() {
		serve("/" + ActionImpl.DEFAULT_SERVICE_NAME + "*").with(
				DispatchServiceImpl.class);
		serve("/api/v1/*").with(APIServlet.class);
	}

}}}

 * handle specific resource serving in [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/server/APIRouter.java APIRouter]
{{{
public class APIRouter extends GuiceRouter {
	public APIRouter(Injector injector, Context context) {
		super(injector, context);
	}

	@Override
	protected void attachRoutes() {
		attach("/theaters/{id}/performances", PerformancesResource.class);
	}
}
}}}

Next, we can define how performances should be exposed:

[http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/server/api/PerformancesResource.java PerformancesResource]
{{{
public class PerformancesResource extends ServerResource {

	@Inject
	PerformanceDAO performanceDAO;
	@Inject
	ShowDAO showDAO;
	@Inject
	LocationDAO locationDAO;
	@Inject
	Gson gson;

	public class PerformancesGET {
		@Expose
		List<Performance> performances;
	}

	@Get("json")
	public Representation get() {
		List<Performance> performances = performanceDAO
				.readByTheater((String) getRequestAttributes().get("id"));

		Performance p;
		for (int i = 0; i < performances.size(); i++) {
			p = performances.get(i);
			p.show = showDAO.read(p.showKey);
			p.location = locationDAO.read(p.locationKey);
			performances.set(i, p);
		}

		PerformancesGET get = new PerformancesGET();
		get.performances = performances;
		JsonRepresentation representation = new JsonRepresentation(
				gson.toJson(get));

		return representation;
	}
}
}}} 

Note that we updated the [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/shared/model/Performance.java Performance model] with new fields and annotations:
{{{
public class Performance implements Serializable {
	...
	@Index
	@Expose
	public Date date;

	...
	@Store(false)
	@Expose
	public transient Show show;

	@Store(false)
	@Expose
	public transient Location location;
}
}}}

The [http://en.wikibooks.org/wiki/Java_Programming/Keywords/transient Java transient keyword] was used in order to prevent `Show` and `Location` to be serialized when transferring data between GWT client to App Engine server.


[http://cultureshows.appspot.com/api/v1/theaters/agxjdWx0dXJlc2hvd3NyDwsSB1RoZWF0ZXIY8asBDA/performances The result] looks like this
{{{
{
   "performances":[
      {
         "performanceKey":"agxjdWx0dXJlc2hvd3NyIQsSB1RoZWF0ZXIY8asBDAsSC1BlcmZvcm1hbmNlGIknDA",
         "date":"2010-12-10 10:00",
         "show":{
            "name":"Vis",
            "websiteURL":"",
            "minuteDuration":75,
            "posterURL":"http://www.passe-partoutdp.ro/images/vis.jpg"
         },
         "location":{
            "name":"Rapsodia"
         }
      },
      {
         "performanceKey":"agxjdWx0dXJlc2hvd3NyIQsSB1RoZWF0ZXIY8asBDAsSC1BlcmZvcm1hbmNlGNEPDA",
         "date":"2010-12-25 10:00",
         "show":{
            "name":"Made in Romania",
            "websiteURL":"",
            "minuteDuration":120,
            "posterURL":"http://www.passe-partoutdp.ro/images/made_thumb.jpg"
         },
         "location":{
            "name":"Rapsodia"
         }
      }
   ]
}
}}}



= Consuming data on 3rd party websites =

How do we get performances to be displayed on a theater website? We can parse the JSON data exposed earlier and just generate some HTML using jQuery. 

We need to consider making the data available in a [http://en.wikipedia.org/wiki/JSON#JSONP JSON with padding format], [http://blog.listry.com/2010/10/app-engine-warm-up-requests-death-of.html performance] and [http://code.google.com/appengine/docs/billing.html cost], since each 3rd party website request translates to CPU and bandwidth usage on App Engine.
To reduce the impact of all these, let's use [http://developer.yahoo.com/yql/ Yahoo! Query Language (YQL)] to fetch and cache the data for us. See [http://developer.yahoo.com/yql/guide YQL  Guide] to understand how it works.

== Setting up YQL ==

Ideally, we would setup three open data tables for Shows, Locations and Performances, and then perform a join on all these. As [http://developer.yahoo.net/forum/?showtopic=2506&hl=join&endsession=1 YQL doesn't support inner joins] easily, we'll go with embedding needed data into Performance entity, as we already did.

The [http://cultureshows.appspot.com/yql/performances.xml performances table] is defined as follows
{{{
<?xml version="1.0" encoding="UTF-8"?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd">
  <meta>
    <sampleQuery>select * from {table} where theaterKey='abc';</sampleQuery>
  </meta>
  <bindings>
    <select itemPath="json.performances" produces="JSON">
      <urls>
        <url>http://cultureshows.appspot.com/api/v1/theaters/{theaterKey}/performances</url>
      </urls>
      <inputs>
        <key id='theaterKey' type='xs:string' paramType='path' required='true' />
      </inputs>
    </select>
  </bindings>
</table>
}}}

and we can use it from [http://developer.yahoo.com/yql/console/ YQL console] like this
{{{
USE "http://cultureshows.appspot.com/yql/performances.xml";
SELECT * FROM performances WHERE theaterKey="agxjdWx0dXJlc2hvd3NyDwsSB1RoZWF0ZXIY8asBDA";
}}}

Additional resources
 * [http://www.kyle-jensen.com/proxy-caching-on-google-appengine Proxy caching on Google App Engine]

== Displaying data on a test website ==
On a [http://cultureshows.appspot.com/yql/performances.html test website], we can now easily display performances data using [http://api.jquery.com/jquery.tmpl/ jquery.tmpl]
{{{
<!doctype html>
<html>
<head>
	<title>Performances listing</title>

	<script type="text/javascript" language="javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js"></script>
	<script type="text/javascript" language="javascript" src="http://ajax.microsoft.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js"></script>

	<script type='text/javascript'>
	var theaterKey = 'agxjdWx0dXJlc2hvd3NyDwsSB1RoZWF0ZXIYqcMBDA';

	var yqlUrl = 'http://query.yahooapis.com/v1/public/yql?q=USE%20%22http%3A%2F%2Fcultureshows.appspot.com%2Fyql%2Fperformances.xml%22%3B%0ASELECT%20*%20FROM%20performances%20WHERE%20theaterKey%3D%22' + theaterKey + '%22%3B%0A&format=json&_maxage=86400';
	$.getJSON(yqlUrl, function(data) {
		$("#performanceTemplate").tmpl(data.query.results.performances).appendTo( "#performances" );
	});

	</script>

	<script id="performanceTemplate" type="text/html">
	<li>
		<div class='showPosterContainer'>
		<img class='showPoster' src='${show.posterURL}'/>
		</div>

		<div class='showPosterContainer'>
		<a class='showWebsite' href='${show.websiteURL}'>${show.name}</a><br/>
		${date}<br/>
		${location.name}<br/>
		Duration: ${show.duration}
		</div>
	</li>
	</script>


</head>
<body>
	<ul id='performances'></ul>
</body>
</html>
}}}

Note the `_maxage=86400` query parameter, which tells YQL to fetch this data from its cache for the next day, rather than reading it from App Engine.

Additional resources
 * [http://www.ibm.com/developerworks/web/library/wa-aj-jsonp2/index.html Building mashups with JSONP, jQuery, and Yahoo! Query Language]


== Displaying data on a real website ==









<wiki:comment>NAV_START</wiki:comment>
<a href='http://code.google.com/p/gwt-gae-book/issues/entry'><img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/envelope.png' border='0' title='Send feedback' /></a>
<img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/spacer.png' border='0' />
<a href='http://code.google.com/p/gwt-gae-book/wiki/ManagingShows'><img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/prev.png' border='0' title='Previous chapter: Managing shows' /></a>
<a href='http://code.google.com/p/gwt-gae-book/wiki/TableOfContents'><img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/contents.png' border='0' title='Table Of Contents' /></a>
<a href='http://code.google.com/p/gwt-gae-book/wiki/AdditionalResources'><img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/next.png' border='0' title='Next chapter: Additional  resources' /></a>
<wiki:comment>NAV_END</wiki:comment>