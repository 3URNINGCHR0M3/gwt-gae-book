#summary Exposing read-only data to 3rd parties

So far we have the possibility to manage performances and shows. The purpose we started this application was to be able to display this data on various theater websites, and this what we'll do next.

<wiki:toc max_depth="2" />

= Exposing performances data as JSON =

First, [http://code.google.com/p/gwt-gae-book/source/checkout Checkout the latest version of the CultureShows code] and go through the reading list below.

*Pre-requisites*
 * [http://en.wikipedia.org/wiki/JSON JSON]
 * [http://code.google.com/p/google-gson/ Converting Java Objects into JSON representation]
 * [http://www.restlet.org/ Restlet, a RESTful web framework for Java]
 * [http://www.2048bits.com/2008/06/creating-simple-web-service-with.html Creating a simple web service with Restlet]
 * [http://code.google.com/p/taoki Taoki, small library to use Restlet with Guice] and [http://code.google.com/p/taoki/wiki/Configuration user guide]

Ideally, we would want to have an URL like
{{{
http://cultureshows.appspot.com/api/v1/theaters/agxjdWx0dXJlc2hvd3NyDwsSB1RoZWF0ZXIY8asBDA/performances
}}}
which would list all the upcoming performances for the theater key given in the path. To reduce the number of web service calls required, we could include `Show` and `Location` entities in the `Performance` data.


Let's setup the infrastructure to use restlet with taoki, as described in the [http://code.google.com/p/taoki/wiki/Configuration taoki user guide]:
 * add a [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/server/APIServlet.java new servlet]
{{{
public class APIServlet extends RestletServlet {
	@Override
	protected GuiceRouter createRouter(Injector injector, Context context) {
		return new APIRouter(injector, context);
	}
}
}}}

 * update [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/server/DispatchServletModule.java DispatchServletModule] to handle the API path too
{{{
	public void configureServlets() {
		serve("/" + ActionImpl.DEFAULT_SERVICE_NAME + "*").with(
				DispatchServiceImpl.class);
		serve("/api/v1/*").with(APIServlet.class);
	}

}}}

 * handle specific resource serving in [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/server/APIRouter.java APIRouter]
{{{
public class APIRouter extends GuiceRouter {
	public APIRouter(Injector injector, Context context) {
		super(injector, context);
	}

	@Override
	protected void attachRoutes() {
		attach("/theaters/{id}/performances", PerformancesResource.class);
	}
}
}}}

Next, we can define how performances should be exposed:

[http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/server/api/PerformancesResource.java PerformancesResource]
{{{
public class PerformancesResource extends ServerResource {

	@Inject
	PerformanceDAO performanceDAO;
	@Inject
	ShowDAO showDAO;
	@Inject
	LocationDAO locationDAO;
	@Inject
	Gson gson;

	public class PerformancesGET {
		@Expose
		List<Performance> performances;
	}

	@Get("json")
	public Representation get() {
		List<Performance> performances = performanceDAO
				.readByTheater((String) getRequestAttributes().get("id"));

		Performance p;
		for (int i = 0; i < performances.size(); i++) {
			p = performances.get(i);
			p.show = showDAO.read(p.showKey);
			p.location = locationDAO.read(p.locationKey);
			performances.set(i, p);
		}

		PerformancesGET get = new PerformancesGET();
		get.performances = performances;
		JsonRepresentation representation = new JsonRepresentation(
				gson.toJson(get));

		return representation;
	}
}
}}} 

Note that we updated the [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/shared/model/Performance.java Performance model] with new fields and annotations:
{{{
public class Performance implements Serializable {
	...
	@Index
	@Expose
	public Date date;

	...
	@Store(false)
	@Expose
	public transient Show show;

	@Store(false)
	@Expose
	public transient Location location;
}
}}}

The [http://en.wikibooks.org/wiki/Java_Programming/Keywords/transient Java transient keyword] was used in order to prevent `Show` and `Location` to be serialized when transferring data between GWT client to !AppEngine server.


[http://cultureshows.appspot.com/api/v1/theaters/agxjdWx0dXJlc2hvd3NyDwsSB1RoZWF0ZXIY8asBDA/performances The result] looks like this
{{{
JSON

}}}



= Consuming data on 3rd party websites =






<wiki:comment>NAV_START</wiki:comment>
<a href='http://code.google.com/p/gwt-gae-book/issues/entry'><img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/envelope.png' border='0' title='Send feedback' /></a>
<img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/spacer.png' border='0' />
<a href='http://code.google.com/p/gwt-gae-book/wiki/ManagingShows'><img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/prev.png' border='0' title='Previous chapter: Managing shows' /></a>
<a href='http://code.google.com/p/gwt-gae-book/wiki/TableOfContents'><img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/contents.png' border='0' title='Table Of Contents' /></a>
<a href='http://code.google.com/p/gwt-gae-book/wiki/UsingExposedData'><img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/next.png' border='0' title='Next chapter: Using exposed data on 3rd party websites' /></a>
<wiki:comment>NAV_END</wiki:comment>