#summary Building the landing page

<wiki:toc max_depth="2" />

There is some reading you have to do in advance for each section, but it's worth it.

= Page Layout =
<img src="http://gwt-gae-book.googlecode.com/svn/wiki/images/grunge.jpg" border="0"  align="right" />
There are two approaches to setup a page layout in GWT:
 * [http://www.noobcube.com/tutorials/html-css/fixed-header-footer-layout-a-beginners-guide-/ using just HTML and CSS], with [http://code.google.com/webtoolkit/doc/latest/DevGuideUiPanels.html#BasicPanels RootPanel]. 
 * [http://code.google.com/webtoolkit/doc/latest/DevGuideUiPanels.html#LayoutPanels using GWT LayoutPanels], with !RootLayoutPanel. This approach introduces additional div tags, which contribute to tag soup and [http://www.devcomments.com/RootPanel-vs-RootLayoutPanel-at197454.htm sometimes] prevent [http://groups.google.com/group/google-web-toolkit/browse_thread/thread/c8cfc4d2dba16862# proper firing of events] on some elements. See also [http://www.zackgrossbart.com/hackito/antiptrn-gwt2/ using GWT for layout] (controversial).

We'll go with the first, standards-based approach. You will use your existing CSS knowledge, or learn it now if needed. CSS will benefit you when developing any web application, not just GWT-based ones.


[GettingStarted Download the template project] and run
{{{
./createProject.sh org.gwtgaebook.CultureShows
}}}
then do File > Import > Existing Projects from Eclipse. Run it to make sure it's working.

_If you can't run the bash script, then use the template project as it is. Waiting for somebody to build a .bat equivalent_

For now we'll focus on building the landing page only, feel free to ignore the rest of the files in template app. We'll cover them later.

*Pre-requisites*
 * [http://code.google.com/webtoolkit/doc/latest/DevGuideUi.html Build User Interfaces], including [http://code.google.com/webtoolkit/doc/latest/DevGuideUiBinder.html Declarative Layout with UiBinder] 
 * [http://code.google.com/webtoolkit/doc/latest/RefWidgetGallery.html Widget List]
 * [http://gwt.google.com/samples/Showcase/Showcase.html GWT showcase] to see some widgets in action
 * [http://code.google.com/webtoolkit/doc/latest/RefGWTClassAPI.html GWT API Reference] bookmark this and keep it handy

First, let's add [http://code.google.com/p/gwt-gae-book/source/browse/#svn/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/resources an image] in Resources.java
{{{
	@Source("Theatre_Masks.png")
	ImageResource logo();
}}}


= Exercise: build the mocked up UI =
Open `LandingView.ui.xml` and try to implement the [VisualizingYourApp mocked up UI]. No need to implement any Java logic yet, just focus on widgets and styling. Continue only when you have a draft version done by yourself.  

= Widgets =


Here's the updated `LandingView.ui.xml`
{{{
<!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">
<ui:UiBinder xmlns:ui="urn:ui:com.google.gwt.uibinder"
	xmlns:g="urn:import:com.google.gwt.user.client.ui"
	xmlns:gdp="urn:import:com.google.gwt.user.datepicker.client"
	ui:generateFormat='com.google.gwt.i18n.rebind.format.PropertiesFormat'
	ui:generateKeys="com.google.gwt.i18n.rebind.keygen.MD5KeyGenerator"
	ui:generateLocales="default"
	>

	<ui:with type="org.gwtgaebook.CultureShows.client.NameTokens" field="nameTokens" />
	<ui:with field='resources' type='org.gwtgaebook.CultureShows.client.resources.Resources' />

	<ui:style>

	.header {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 3em;
		font-size: 0.8em;
		background-color: #619a00;
	}

	.content {
		padding-top: 3em;
		margin: 0 auto;
		max-width: 50em;
	}

	</ui:style>

	<g:HTMLPanel ui:field="container">
    	<g:HTMLPanel addStyleNames="{style.header}">
    		<g:HTMLPanel>
    			<g:Image resource='{resources.logo}'/>
    		</g:HTMLPanel>
    		<g:HTMLPanel>
    			<g:Hyperlink>Sign In</g:Hyperlink>
    		</g:HTMLPanel>
    	</g:HTMLPanel>


	    <g:HTMLPanel addStyleNames="{style.content}">
			<p>Lorem ipsum dolor sit amet, yacht doctoral private gentlemen, expensive
blissfull a noble cultered, career affluent. Becoming delegate pedigree
elegant philanthropic silk portfolio gem. </p>


		    <g:HTMLPanel>
				<gdp:DateBox></gdp:DateBox>
			    <g:TextBox></g:TextBox>
			    <g:TextBox></g:TextBox>
			    <g:Button>Schedule show</g:Button>
		    </g:HTMLPanel>

		    <g:HTMLPanel>
				<g:Hyperlink>Sign In</g:Hyperlink>
				to permanently save shows,
				locations, schedule and more
		    </g:HTMLPanel>

		    <g:HTMLPanel>
				TODO Shows list goes here

		    </g:HTMLPanel>

			<g:Hyperlink>Learn how to list show schedule directly on your theater website</g:Hyperlink>

	    </g:HTMLPanel>


	</g:HTMLPanel>

</ui:UiBinder>
}}}

and the result :)

[http://gwt-gae-book.googlecode.com/svn/wiki/assets/landing_widgets.png]

As with any other section, make sure you understand what's happening before going further. Use the provided links to docs and Google to search for something else. 

Now, any color blind, long-time, terminal-only Unix administrator can tell something about the above page: it's damn ugly!

= Styling =

*Pre-requisites*
 * [http://www.w3schools.com/css/default.asp CSS Tutorial]
 * [http://csstipsandtricks.com CSS Tips & Tricks]

*Styled landing page*

[http://gwt-gae-book.googlecode.com/svn/wiki/assets/landing_style.png]


Here's how it was done:
 * [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/resources/main.css?r=168 main.css] - added various styles, to be used in all application
 * [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/resources/Resources.java?r=168 Resources.java] - listed style names
 * [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/war/main.html?r=372 main.html] - added a jQuery plugin as fallback for HTML5 placeholder attribute and .placeholder class
 * [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/landing/LandingView.ui.xml?r=168 LandingView.ui.xml] - updated markup, added style names
 * [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/landing/LandingView.java?r=184 LandingView.java] - added HTML5 placeholder, required attributes and activated jQuery plugin via [http://code.google.com/webtoolkit/doc/latest/DevGuideCodingBasicsJSNI.html JSNI]

= Using native !JavaScript =

There are cases when you might want to use native !JavaScript rather than pure GWT, such as the one above. See [http://code.google.com/webtoolkit/doc/latest/DevGuideCodingBasicsJSNI.html JavaScript Native Interface] and an example of  [http://www.zackgrossbart.com/hackito/antiptrn-gwt2/ building custom GWT widgets which include native JavaScript]. JSNI is a good choice when you want to reuse existing larger !JavaScript functionality (e.g. jQuery plugins) with easy upgrades to new versions, or sharing your code with other pure !JavaScript users.

If you are looking for jQuery-like functionality in GWT, there's [http://code.google.com/p/gwtquery/ gwtQuery] ([http://www.youtube.com/watch?v=sl5em1UPuoI video introduction]). gwtQuery is a better choice when you're writing functionality from scratch as it gives you all GWT advantages over native !JavaScript. 

Again, use the best tool for the job. Therefore an important criteria selection for your tool set should be allowing easy inter-operating with other tools.


= Mobile, tablets, TV and other devices =

<img src="http://gwt-gae-book.googlecode.com/svn/wiki/images/quijote1.jpg" border="0"  align="right" />

Sometimes, you might want to have different views for different screen sizes. The styling above is liquid (resize browser window to try it out) and it works for now. We could have used [http://www.webdesignerwall.com/tutorials/css3-media-queries/ CSS3 media queries] to hide completely the signup sidebar on a small screen. See [http://www.smashingmagazine.com/2010/07/19/how-to-use-css3-media-queries-to-create-a-mobile-version-of-your-website/ another tutorial]. Media queries support [http://groups.google.com/group/google-web-toolkit/browse_thread/thread/86047ca5c364679f/2871b1e5e35be0d1 is still missing] from GWT.


= Model-View-Presenter (MVP) =

Besides the few files we worked with so far, the template project contains several more. Let's learn about

 * [http://code.google.com/webtoolkit/articles/mvp-architecture.html MVP architecture]
 * [http://code.google.com/p/gwt-platform/wiki/GettingStarted Getting started with gwt-platform]
 * [http://code.google.com/webtoolkit/doc/latest/DevGuideMvpActivitiesAndPlaces.html GWT MVP Framework]
 * [http://code.google.com/p/gwt-platform/wiki/ComparisonWithGwtMVP Comparison of gwt-platform with GWT MVP]
 * [http://martinfowler.com/eaaDev/uiArchs.html GUI Architectures]
 * [http://code.google.com/p/google-guice/ Guice dependency injection framework]
 * [http://code.google.com/p/google-gin/wiki/GinTutorial Gin dependency injection for GWT]
 * [http://arcbees.wordpress.com/2010/09/03/reversing-the-mvp-pattern-and-using-uihandler/ Reversing the MVP pattern and using @UiHandler]
 * [http://arcbees.wordpress.com/2010/09/18/uihandlers-and-supervising-controlers/ UiHandlers and supervising controller]

Think of !UiHandlers as a contract signed by Presenter: this is what Presenter has to offer, usable by others (usually Views). The Presenter also requires Views to offer something:
{{{
	public interface MyView extends View, HasUiHandlers<LandingUiHandlers> {
		void resetAndFocus();
	}
}}}
You can switch different Presenter and View implementations without any worries as long as they respect these contracts.

Now review all files in the template project. Do they make full sense? 

== Exercise ==
Using what you learned above, start implementing saving a show when "Schedule show" button is clicked. For now, it should just log a message in Presenter with the date, location and show name.

== Exercise solution ==

In !LandingUiHandlers, the Presenter commits to offer some functionality:
{{{
public interface LandingUiHandlers extends UiHandlers {
	void scheduleShow(Date date, String showName, String locationName);
}
}}}

After you save this, notice there is an error on !LandingPresenter:
{{{
The type LandingPresenter must implement the inherited abstract method
LandingUiHandlers.scheduleShow(Date, String, String)
}}}

Let's actually keep our commitment and implement this:
{{{
	@Override
	public void scheduleShow(Date date, String showName, String locationName) {
		Main.logger.info("Presenter scheduling on " + date.toString() + " the show "
				+ showName + " at location " + locationName);
	}
}}}

Here's how it's used by the View
{{{
	@UiField
	TextBox show;
	@UiField
	TextBox location;
	@UiField
	DateBox date;

	@UiField
	Button scheduleShow;

	@UiHandler("scheduleShow")
	void onScheduleShowClicked(ClickEvent event) {
		getUiHandlers().scheduleShow(date.getValue(), show.getValue(),
				location.getValue());
	}
}}}

Run and test this functionality. In Development Mode Eclipse tab you'll see
{{{
... [INFO ] Presenter scheduling on Fri Oct 22 12:00:00 EEST 2010 the show Dream at location Rapsodia
}}}

Note there are no widgets or other UI elements from View exposed in Presenter. The Presenter should not care about UI elements, only about data the View exposes. You can have different Views for different devices, or mocked Views for unit tests.

[http://code.google.com/p/gwt-gae-book/source/browse/#svn/trunk/CultureShows Browse the full source code]

= Additional resources =
[http://www.openclipart.org Open Clip Art Library]

[http://www.sxc.hu/ Stock.XCHNG free stock photos] 

[http://www.smashingmagazine.com Smashing Magazine]

[http://www.alistapart.com/articles/fluidgrids/ Fluid grids] 

[http://www.webdesignerwall.com/tutorials/css3-gradient-buttons/ Gradient buttons]

[http://www.mezzoblue.com/zengarden/resources/ CSS Zen Garden resources]

[http://www.colorcombos.com/combolibrary.html Color combos]

<wiki:comment>NAV_START</wiki:comment>
<a href='http://code.google.com/p/gwt-gae-book/issues/entry'><img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/envelope.png' border='0' title='Send feedback' /></a>
<img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/spacer.png' border='0' />
<a href='http://code.google.com/p/gwt-gae-book/wiki/DataModeling'><img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/prev.png' border='0' title='Previous chapter: Data modeling' /></a>
<a href='http://code.google.com/p/gwt-gae-book/wiki/TableOfContents'><img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/contents.png' border='0' title='Table Of Contents' /></a>
<a href='http://code.google.com/p/gwt-gae-book/wiki/ClientServer'><img src='http://gwt-gae-book.googlecode.com/svn/wiki/assets/next.png' border='0' title='Next chapter: Client-server communication' /></a>
<wiki:comment>NAV_END</wiki:comment>