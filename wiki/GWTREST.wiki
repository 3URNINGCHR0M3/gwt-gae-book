#summary Building a REST GWT client

= Goals =
 * support JSON-only APIs
 * support custom headers for each call (use cases: authentication token, pagination, XSRF...), media type
 * support binary fields / multipart requests (e.g. [http://twitpic.com/api.do uploading a file])
 * get request status, cancel request (use case: loading indicator)

== Nice to have ==
 * XSRF protection. Reason for being optional: for services requiring auth, use a HTTP header. Store the auth token value in GWT client, never in a cookie, so it can't be read by other sites.
 * caching, batching, centralized failure handling, undo/redo,  similar to [http://code.google.com/p/gwt-platform/wiki/GettingStartedDispatch gwtp dispatch]
 * be able to demo the app offline, with easy to run mocked calls. One easy solution: have a local HTTP server with static JSON files in pre-determined places.
 * offline support - be able to run the app offline, and sync when going online (might be a generic problem not related to REST)


= Recommended alternative: GWTP dispatch, `RequestBuilder` and piriti =

Generic helpers
client/dispatch


For each client-server call, client should 
 # write a generator for Action and Result data 
 # define JSON models for sending and receiving data
 # write a handler ([http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/locations/ReadLocationsHandler.java sample]) which
  * extracts the result by parsing the model (this is generic, might be implemnted by `AbstractRequestBuilderClientActionHandler`)
  * sets `RequestBuilder` data (url, data)
 # register the handler
 # run regular gwtp dispatch.execute()


= Alternative: GWTP dispatch, GWT Restlet and piriti =
Comparted to `RequestBuilder`, Restlet has
* Support for content negotiation 
* Better error / exception handling 
* Better support for HTTP methods 
* Piriti supports Restlet 

TBD


= Alternative: RequestBuilder and piriti =


For each client-server call, client should 
 # define JSON models for sending and receiving data
 # set `RequestBuilder` data
 # run a wrapper for executing `RequestBuilder`
 # extract the result


= Alternative: RequestBuilder and AutoBean =

[http://code.google.com/p/gwt-gae-book/source/detail?r=829 Sample]
* Model requires lots of boilerplate code (compare [http://code.google.com/p/gwt-gae-book/source/browse/trunk/CultureShows/src/org/gwtgaebook/CultureShows/client/locations/LocationModel.java?spec=svn829&r=829 AutoBean] with [x Piriti] version])
* AutoBean entities aren't easy to use in the rest of the app, besides java/json conversion.


= TODO =
 * include [http://code.google.com/p/piriti/source/browse/trunk/restlet/src/main/java/name/pehl/piriti/restlet/client/UrlBuilder.java UrlBuilder] in guava ? 
 * include `AbstractRequestBuilderClientActionHandler`, `DispatchRequestRequestBuilderImpl`, `RequestRuntimeException` in gwtp
 * Automatically handle registering action handlers, somehow?
  * remove the need for !LocationsHandlerRegistry  
 * any other ideas of reducing the 7 steps above? These would have to be performed for each client-server call :(
 * use [http://code.google.com/p/gwt-platform/issues/detail?id=179 RequestBuilder] or [http://code.google.com/p/tire-d8/source/browse/trunk/app/src/main/java/name/pehl/tire/client/dispatch/AbstractRestletClientActionHandler.java Restlet] implementation? `Restlet` requires yet another library and doesn't bring any major advantages compared to a `RequestBuilder` wrapper. 

 * full sample including login using openid


= References =


http://google-web-toolkit.googlecode.com/svn/javadoc/2.1/com/google/gwt/http/client/RequestBuilder.html

http://google-web-toolkit.googlecode.com/svn/javadoc/2.1/com/google/gwt/http/client/Response.html

http://code.google.com/p/piriti/ (gson would have been great, but GWT doesn't support java reflection)

http://code.google.com/p/gwt-platform/issues/detail?id=179